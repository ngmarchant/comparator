// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// sparse_to_full
S4 sparse_to_full(S4& pmat);
RcppExport SEXP _comparator_sparse_to_full(SEXP pmatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< S4& >::type pmat(pmatSEXP);
    rcpp_result_gen = Rcpp::wrap(sparse_to_full(pmat));
    return rcpp_result_gen;
END_RCPP
}
// elementwise
NumericVector elementwise(List& x, List& y, const S4& m_S4);
RcppExport SEXP _comparator_elementwise(SEXP xSEXP, SEXP ySEXP, SEXP m_S4SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< List& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const S4& >::type m_S4(m_S4SEXP);
    rcpp_result_gen = Rcpp::wrap(elementwise(x, y, m_S4));
    return rcpp_result_gen;
END_RCPP
}
// pairwise
S4 pairwise(List& x, Nullable<List> y_, const S4& m_S4, const LogicalVector& full);
RcppExport SEXP _comparator_pairwise(SEXP xSEXP, SEXP y_SEXP, SEXP m_S4SEXP, SEXP fullSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Nullable<List> >::type y_(y_SEXP);
    Rcpp::traits::input_parameter< const S4& >::type m_S4(m_S4SEXP);
    Rcpp::traits::input_parameter< const LogicalVector& >::type full(fullSEXP);
    rcpp_result_gen = Rcpp::wrap(pairwise(x, y_, m_S4, full));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_comparator_sparse_to_full", (DL_FUNC) &_comparator_sparse_to_full, 1},
    {"_comparator_elementwise", (DL_FUNC) &_comparator_elementwise, 3},
    {"_comparator_pairwise", (DL_FUNC) &_comparator_pairwise, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_comparator(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
