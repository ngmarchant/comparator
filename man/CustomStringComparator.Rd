% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CustomStringComparator.R
\name{CustomStringComparator}
\alias{CustomStringComparator}
\title{Custom String Comparator}
\usage{
CustomStringComparator(custom_fn, symmetric, distance, similarity, tri_inequal)
}
\arguments{
\item{custom_fn}{a string comparison function that takes a pair of character
vectors as arguments and returns a vector of comparison scores.}

\item{symmetric}{a logical of length 1. If TRUE, the comparator is symmetric
in its arguments---i.e. \code{custom_fn(x, y)} is identical to
\code{custom_fn(y, x)}.}

\item{distance}{a logical of length 1. If \code{TRUE}, the comparator produces
distances and satisfies \code{custom_fn(x, x) = 0}. The comparator may not
satisfy all of the properties of a distance metric.}

\item{similarity}{a logical of length 1. If \code{TRUE}, the comparator produces
similarity scores.}

\item{tri_inequal}{a logical of length 1. If \code{TRUE}, the comparator satisfies
the triangle inequality. This is only possible (but not guaranteed) if
\code{distance = TRUE} and \code{symmetric = TRUE}. If in doubt, it's best to
pass FALSE.}
}
\description{
Compares a pair of strings \eqn{x} and \eqn{y} using a custom function.
The resulting comparator can be used wherever an object of class
\code{\linkS4class{StringComparator}} is required.
}
\examples{
## Compare names with possible typos using a reference of known names
known_names <- c("Roberto", "Umberto", "Alberto", "Emberto", "Norberto", "Humberto")
c1 <- InVocabulary(known_names)
c2 <- Levenshtein(similarity = TRUE, normalize = TRUE)

## Define a custom comparison function as the product of c1 and c2
custom_fn <- function(x, y) c1(x, y) * c2(x, y)

## Instantiate a string comparator
comp <- CustomStringComparator(custom_fn, symmetric = TRUE, distance = FALSE, 
                               similarity = TRUE, tri_inequal = FALSE)

x <- "Emberto"
y <- c("Enberto", "Umberto") 
similarities <- comp(x, y)

}
