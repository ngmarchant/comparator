% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/OSA.R
\name{OSA}
\alias{OSA}
\title{Optimal String Alignment (OSA) Distance}
\usage{
OSA(
  deletion = 1,
  insertion = 1,
  substitution = 1,
  transposition = 1,
  normalize = FALSE,
  similarity = FALSE,
  ignore_case = FALSE,
  use_bytes = FALSE,
  ...
)
}
\arguments{
\item{deletion}{positive cost associated with deletion of a character.
Defaults to unit cost.}

\item{insertion}{positive cost associated insertion of a character.
Defaults to unit cost.}

\item{substitution}{positive cost associated with substitution of a
character. Defaults to unit cost.}

\item{transposition}{positive cost associated with transposing (swapping)
a pair of characters. Defaults to unit cost.}

\item{normalize}{a logical. If TRUE, distances are normalized to the
unit interval. Defaults to FALSE.}

\item{similarity}{a logical. If TRUE, similarity scores on the unit interval
are returned instead of distances. Defaults to FALSE.}

\item{ignore_case}{a logical. If TRUE, case is ignored when computing the
distance. Defaults to FALSE.}

\item{use_bytes}{a logical. If TRUE, distances are computed byte-by-byte
rather than character-by-character.}
}
\description{
The Optimal String Alignment distance between two strings is the minimum
cost of single-character operations (insertions, deletions, substitutions or
transpositions) required to transform one string into the other. TODO -
explain difference from Damerau-Levenshtein.
}
\note{
The Optimal String Alignment is not a proper distance metric as it
does not satisfy the triangle inequality.
}
